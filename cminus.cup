/**

 created by Manav Patel
 0888536

*/

import absyn.*;

parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};

/* -------------- Decleration of terminals -------------- */
terminal IF, ELSE, INT, RETURN, VOID, WHILE;
terminal PLUS, MINUS, TIMES, SLASH, LT, LTE, GT, GTE, EQ, NEQ, ASGN;
terminal SEMI, COMMA, OPRA, CPRA, OSQPRA, CSQPRA, OBRAC, CBRAC;
terminal String ID, NUM;
terminal ERROR;

non terminal DecList program;

non terminal DecList dec_list;
non terminal Dec dec;
non terminal Dec fun_dec;
non terminal Type type_spec;
non terminal VarDecList params, local_dec, param_list;
non terminal VarDec param, var_dec;

non terminal CompoundExp compound_stmt;

non terminal ExpList stmt_list;
non terminal ExpList args;
non terminal ExpList arg_list;

non terminal Exp statement, exp_stmt;
non terminal Exp selection_stmt;
non terminal Exp iteration_stmt;
non terminal Exp return_stmt;
non terminal Exp expression;
non terminal Var var;
non terminal Exp simple_exp;
non terminal Exp call;



precedence left PLUS, MINUS;
precedence left TIMES, SLASH;
precedence nonassoc LT, GT, LTE, GTE, EQ, NEQ;
precedence right ELSE;

start with program;
/*------------------ Grammar Section ------------------- */

program     ::= dec_list:d {:RESULT = d;:};


dec_list    ::= dec_list:s dec:d {: 
                  DecList l = s;
                  while(l.tail != null) {
                     l = l.tail;
                  }
                  l.tail = new DecList(d, null);
                  RESULT = s;
                   :}
               | dec:d {:
                  RESULT = new DecList(d, null);
               :}  
               ;

dec         ::= var_dec:v {: RESULT = v; :} 
               | fun_dec:f {: RESULT = f; :}
               | error:e {:
                  report_error("UNIDENTIFIED TOKEN NOT VARIABLE DEC OR FUNCTION DEC", e);
                  RESULT = new DecError(eleft,eright);
               :};

var_dec     ::= type_spec:t ID:i SEMI {:
                  RESULT = new SimpleDec(ileft, iright, t, i);
                  :}
               | type_spec:t ID:i OSQPRA NUM:n CSQPRA SEMI {:
                  RESULT = new ArrayDec(ileft, iright, t, i, new IntExp(nleft, nright, n));
                  :}
               | error:e ID:i SEMI {:
                  report_error("INVLAID VARIABLE TYPE", e);
                  RESULT = new SimpleDec(ileft, iright, new Type(ileft, iright, Type.ERROR), i);
               :}
                | type_spec:t ID:i OSQPRA error:e CSQPRA SEMI {:
                  report_error("INVALID SIZE FOR ARRAY DECLERATION", e);
                  RESULT = new ArrayDec(tleft, tright, t, i, new IntExp(ileft, iright, "0"));
               :}
               | type_spec:t ID:i error:e {:
                  report_error("MISSING SEMI COLON IN VARIABLE DECLERATION", e);
                  RESULT = new SimpleDec(ileft, iright, t, i);
               :}
               ;

type_spec   ::= INT:i {:
                  RESULT = new Type(ileft, iright, Type.INT);
                  :}
                  | VOID:v {:
                  RESULT = new Type(vleft, vright, Type.VOID);
                  :}
                  ;

fun_dec     ::= type_spec:t ID:i OPRA params:p CPRA compound_stmt:c {: 
                  RESULT = new FuncDec(ileft, iright, t, i, p, c);
               :}
               | error:e ID:i OPRA params:p CPRA compound_stmt:c {:
                  report_error("INVALID FUNCTION DECLERATION: WRONG RETURN TYPE", e);
                  RESULT = new FuncDec(ileft, iright, new Type(ileft, iright, Type.ERROR), i , p, c);
               :}
               | type_spec:t error:e OPRA params:p CPRA compound_stmt:c {:
                  report_error("INVLAID FUNCTION ID", e);
                  RESULT = new FuncDec(eleft, eright, t, "Missing", p, c);
               :}
               ;

params      ::= param_list:l
                  {:
                     RESULT = l;
                  :}
               | VOID
               ;

param_list  ::= param_list:p COMMA param:r
               {:
                  VarDecList l = p;
                  while(l.tail != null) {
                     l = l.tail;
                  }
                  l.tail = new VarDecList(r, null);
                  RESULT = p;
               :}
               | param:r
               {:
                  RESULT = new VarDecList(r, null);
               :}
               ;

param       ::= type_spec:t ID:i 
               {:RESULT = new SimpleDec(ileft, iright, t, i); :} 
               | type_spec:t ID:i OSQPRA CSQPRA 
               {: RESULT = new ArrayDec(tleft, tright, t, i, new IntExp(ileft, iright, "")); :} ;

compound_stmt ::= OBRAC local_dec:l stmt_list:s CBRAC 
               {: RESULT = new CompoundExp(lleft, lright, l, s); :} ;

local_dec   ::= local_dec:l var_dec:v
               {: VarDecList list = l;
                  while(list.tail != null) {
                      list = list.tail;
                   }
                   list.tail = new VarDecList(v, null);
                   RESULT = l;
                :} 
               | {:RESULT = new VarDecList(null, null);
                     :}
               ;

stmt_list   ::= stmt_list:l statement:s {:
                  ExpList list = l;
                  while(list.tail != null) {
                     list = list.tail;
                  }
                  list.tail = new ExpList(s, null);
                  RESULT = l;
               :} 
               | statement:s 
                  {:
                     RESULT = new ExpList(s, null);
                  :}
            ;
statement   ::= exp_stmt: e {: RESULT = e; :} 
               | compound_stmt:c {: RESULT = c;   :} 
               | selection_stmt:s {: RESULT = s; :} 
               | iteration_stmt:i {: RESULT = i; :} 
               | return_stmt:r {: RESULT = r; :};

exp_stmt    ::= expression:e SEMI {:RESULT = e;:}
               | SEMI:s {:RESULT = new NilExp(sleft, sright); :};

selection_stmt  ::= IF OPRA expression:e CPRA statement:s {:RESULT = new IfExp(eleft, eright, e, s);:} 
               | IF OPRA expression:e2 CPRA statement:s2 ELSE statement:s3 
               {:RESULT = new IfExp(e2left, e2right, e2, s2, s3);:} 
                
               ;

iteration_stmt  ::= WHILE OPRA expression:e CPRA statement:s
                     {:RESULT = new WhileExp(eleft, eright, e, s);:}
                  ;

return_stmt     ::= RETURN expression:e SEMI {:RESULT = new ReturnExp(eleft,eright, e);:} 
                  | RETURN:r SEMI {:RESULT = new ReturnExp(rleft,rright, new NilExp(rright, rleft));:}
                  ;

expression  ::= var:v ASGN expression:e {:RESULT = new AssgnExp(vleft, vright, v, e);:}
               | simple_exp:s {:RESULT = s;:}
               ;

var     ::= ID:i {:RESULT = new SimpleVar(ileft, iright, i);:}
            | ID:i OSQPRA expression:e CSQPRA {:RESULT = new IndexVar(ileft, iright, i, e);:}
            ;

simple_exp     ::= simple_exp:s1 PLUS simple_exp:s2 {:RESULT =  new OpExp(s1left, s1right, s1, OpExp.PLUS, s2);:}
                    | simple_exp:s1 MINUS simple_exp:s2 {:RESULT = new OpExp(s1left, s1right, s1, OpExp.MINUS, s2);:}
                    | simple_exp:s1 TIMES simple_exp:s2 {:RESULT = new OpExp(s1left, s1right, s1, OpExp.TIMES, s2);:}
                    | simple_exp:s1 SLASH simple_exp:s2 {:RESULT = new OpExp(s1left, s1right, s1, OpExp.DIV, s2);:}
                    | simple_exp:s1 EQ simple_exp:s2 {:RESULT = new OpExp(s1left, s1right, s1, OpExp.EQ, s2);:}
                    | simple_exp:s1 LT simple_exp:s2 {:RESULT = new OpExp(s1left, s1right, s1, OpExp.LT, s2);:}
                    | simple_exp:s1 GT simple_exp:s2 {:RESULT = new OpExp(s1left, s1right, s1, OpExp.GT, s2);:}
                    | simple_exp:s1 GTE simple_exp:s2 {:RESULT = new OpExp(s1left, s1right, s1, OpExp.GTE, s2);:}
                    | simple_exp:s1 LTE simple_exp:s2 {:RESULT = new OpExp(s1left, s1right, s1, OpExp.LTE, s2);:}
                    | simple_exp:s1 NEQ simple_exp:s2 {:RESULT = new OpExp(s1left, s1right, s1, OpExp.NEQ, s2);:}
                    | OPRA simple_exp:s1 CPRA {:RESULT = s1;:}
                    | var:v {:RESULT = new VarExp(vleft, vright, v); :}
                    | call:c {:RESULT = c; :}
                    | NUM:n {:RESULT  = new IntExp(nleft, nright, n);:}
                    | error:e {:report_error("INVALID EXPRESSION", e); RESULT = new NilExp(eleft, eright);:}
                        ;

call    ::= ID:i OPRA args:a CPRA {:RESULT = new CallExp(ileft, iright, i, a); :};

args    ::= arg_list:l 
            {:RESULT = l;:}
            | {:RESULT = null;:}
            ;
arg_list    ::= arg_list:l COMMA expression:e 
            {: 
               ExpList list = l;
               while(list.tail != null) {
                  list = list.tail;
               }
               list.tail = new ExpList(e, null);
               RESULT = l;
             :}
            | expression: e 
            {:RESULT = new ExpList(e, null);:}
            ;






